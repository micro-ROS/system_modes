import os

import unittest

import ament_index_python
import launch
import launch_ros
import launch_testing.actions
import launch_testing_ros

from launch import LaunchDescription
from launch.actions import ExecuteProcess


def generate_test_description():
    os.environ['OSPL_VERBOSITY'] = '8'
    os.environ['RCUTILS_CONSOLE_OUTPUT_FORMAT'] = '{message}'

    modelfile = '@MODELFILE@'

    mode_manager = launch_ros.actions.Node(
            package='system_modes',
            executable='mode_manager',
            emulate_tty=True,
            output='screen',
            parameters=[
                {"modelfile": modelfile}
            ])

    test_nodes = ExecuteProcess(
        cmd=[
            "@PYTHON_EXECUTABLE@",
            "@TEST_NODES@"
            ],
        name='test_nodes',
        emulate_tty=True)

    mode_monitor = launch_ros.actions.Node(
            package='system_modes',
            executable='mode_monitor',
            emulate_tty=True,
            output='screen',
            parameters=[
                {"modelfile": modelfile},
                {"debug": True},
                {"verbose": True},
                {"rate": 300},
            ])

    launch_description = LaunchDescription()
    launch_description.add_action(mode_manager)
    launch_description.add_action(mode_monitor)
    launch_description.add_action(test_nodes)
    launch_description.add_action(launch_testing.actions.ReadyToTest())

    return launch_description, locals()

class TestModeManagement(unittest.TestCase):

    def test_processes_output(self, proc_output, mode_monitor):
        """Check manager and nodes logging output for expected strings."""

        from launch_testing.tools.output import get_default_filtered_prefixes
        output_filter = launch_testing_ros.tools.basic_output_filter(
            filtered_prefixes=get_default_filtered_prefixes() + ['service not available, waiting...'],
            filtered_rmw_implementation='@RMW_IMPLEMENTATION@'
        )
        proc_output.assertWaitFor(
            expected_output=launch_testing.tools.expected_output_from_file(path="@EXPECTED_OUTPUT@"),
            process=mode_monitor,
            output_filter=output_filter,
            timeout=15,
            stream='stdout')

        import time
        time.sleep(1)
