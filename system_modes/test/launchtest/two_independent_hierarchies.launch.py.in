import os

import unittest

import ament_index_python
import launch
import launch_ros
import launch_testing
import launch_testing.actions
import launch_testing.asserts
import launch_testing.util
import launch_testing_ros

from launch import LaunchDescription
from launch.actions import ExecuteProcess
from launch.events import matches_action
from launch.events.process import ShutdownProcess

import lifecycle_msgs.msg


def generate_test_description():
    os.environ['OSPL_VERBOSITY'] = '8'
    os.environ['RCUTILS_CONSOLE_OUTPUT_FORMAT'] = '{message}'

    modelfile = '@MODELFILE@'

    mode_manager = launch.actions.IncludeLaunchDescription(
        launch.launch_description_sources.PythonLaunchDescriptionSource(
            ament_index_python.packages.get_package_share_directory(
                'system_modes') + '/launch/mode_manager.launch.py'),
        launch_arguments={'modelfile': modelfile}.items())

    test_nodes = ExecuteProcess(
        cmd=[
            "@PYTHON_EXECUTABLE@",
            "@TEST_NODES@"
            ],
        name='test_four_lifecycle_nodes',
        emulate_tty=True,
        output='screen')

    launch_description = LaunchDescription()
    launch_description.add_action(mode_manager)
    launch_description.add_action(test_nodes)
    launch_description.add_action(launch_testing.util.KeepAliveProc())
    launch_description.add_action(launch_testing.actions.ReadyToTest())

    return launch_description, locals()

class TestModeManagement(unittest.TestCase):

    def test_processes_output(self, proc_output, test_nodes):
        """Check manager and nodes logging output for expected strings."""

        from launch_testing.tools.output import get_default_filtered_prefixes
        output_filter = launch_testing_ros.tools.basic_output_filter(
            filtered_prefixes=get_default_filtered_prefixes() + ['service not available, waiting...'],
            filtered_rmw_implementation='@rmw_implementation@'
        )
        proc_output.assertWaitFor(
            expected_output=launch_testing.tools.expected_output_from_file(path="@EXPECTED_OUTPUT@"),
            process=test_nodes,
            output_filter=output_filter,
            timeout=15
        )

        import time
        time.sleep(1)

@launch_testing.post_shutdown_test()
class TestModeManagementShutdown(unittest.TestCase):

    def test_last_process_exit_code(self, proc_info, test_nodes):
        launch_testing.asserts.assertExitCodes(proc_info, process=test_nodes)
