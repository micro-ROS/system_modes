import os

import unittest

import ament_index_python
import launch
import launch_ros
import launch_testing
import launch_testing.actions
import launch_testing.asserts
import launch_testing.util
import launch_testing_ros

from launch import LaunchDescription
from launch.actions import ExecuteProcess
from launch.events import matches_action
from launch.events.process import ShutdownProcess

import launch_system_modes

import lifecycle_msgs.msg


def generate_test_description():
    os.environ['OSPL_VERBOSITY'] = '8'
    os.environ['RCUTILS_CONSOLE_OUTPUT_FORMAT'] = '{message}'

    modelfile = '@MODELFILE@'

    # Setup
    mode_manager = launch_ros.actions.Node(
        package='system_modes',
        executable='mode_manager',
        emulate_tty=True,
        output='screen',
        parameters=[
            {"modelfile": modelfile}
        ])

    actuation = launch_system_modes.actions.System(
            name='actuation',
            namespace='')

    drive_base = launch_system_modes.actions.Node(
            package='system_modes_examples',
            executable='drive_base',
            name='drive_base',
            namespace='',
            output='screen')

    manipulator = launch_system_modes.actions.Node(
            package='system_modes_examples',
            executable='manipulator',
            name='manipulator',
            namespace='',
            output='screen')

    # Startup
    actuation_configure = launch.actions.TimerAction(
        period=2.,
        actions=[launch.actions.EmitEvent(
            event=launch_system_modes.events.ChangeState(
                system_part_matcher=launch.events.matchers.matches_action(actuation),
                transition_id=lifecycle_msgs.msg.Transition.TRANSITION_CONFIGURE))
        ]
    )

    actuation_activate = launch.actions.EmitEvent(
        event=launch_system_modes.events.ChangeState(
            system_part_matcher=launch.events.matchers.matches_action(actuation),
            transition_id=lifecycle_msgs.msg.Transition.TRANSITION_ACTIVATE,
        ))

    actuation_change_mode_to_DEFAULT = launch.actions.EmitEvent(
        event=launch_system_modes.events.ChangeMode(
            system_part_matcher=launch.events.matchers.matches_action(actuation),
            mode_name='__DEFAULT__',
        ))

    actuation_change_mode_to_FAST = launch.actions.EmitEvent(
        event=launch_system_modes.events.ChangeMode(
            system_part_matcher=launch.events.matchers.matches_action(actuation),
            mode_name='PERFORMANCE',
        ))

    # Handlers
    on_inactive_handler = launch.actions.RegisterEventHandler(
        launch_system_modes.event_handlers.OnStateTransition(
            target_system_part=actuation,
            goal_state='inactive',
            entities=[actuation_activate]))

    on_active_handler = launch.actions.RegisterEventHandler(
        launch_system_modes.event_handlers.OnStateTransition(
            target_system_part=actuation,
            goal_state='active',
            entities=[actuation_change_mode_to_DEFAULT]))

    on_DEFAULT_mode = launch.actions.RegisterEventHandler(
        launch_system_modes.event_handlers.OnModeChanged(
            target_system_part=actuation,
            goal_mode='__DEFAULT__',
            entities=[actuation_change_mode_to_FAST]))

    launch_description = LaunchDescription()
    launch_description.add_action(mode_manager)
    launch_description.add_action(actuation)
    launch_description.add_action(drive_base)
    launch_description.add_action(manipulator)
    launch_description.add_action(on_inactive_handler)
    launch_description.add_action(on_active_handler)
    launch_description.add_action(on_DEFAULT_mode)
    launch_description.add_action(launch_testing.util.KeepAliveProc())
    launch_description.add_action(launch_testing.actions.ReadyToTest())
    launch_description.add_action(actuation_configure)

    return launch_description, locals()

class TestModeManagement(unittest.TestCase):

    def test_processes_output(self, proc_output, drive_base):
        """Check manager and nodes logging output for expected strings."""

        from launch_testing.tools.output import get_default_filtered_prefixes
        output_filter = launch_testing_ros.tools.basic_output_filter(
            filtered_prefixes=get_default_filtered_prefixes() + ['service not available, waiting...'],
            filtered_rmw_implementation='@rmw_implementation@'
        )
        proc_output.assertWaitFor(
            expected_output=launch_testing.tools.expected_output_from_file(path="@EXPECTED_OUTPUT@"),
            process=drive_base,
            output_filter=output_filter,
            timeout=15
        )

@launch_testing.post_shutdown_test()
class TestModeManagementShutdown(unittest.TestCase):

    def test_last_process_exit_code(self, proc_info, drive_base):
        launch_testing.asserts.assertExitCodes(proc_info, process=drive_base)
